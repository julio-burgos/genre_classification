{"version":3,"sources":["images/upc-logo.svg","utils/spectralanalysis.ts","components/GenreClassification.tsx","components/Recomend.tsx","components/MyRoutes.tsx","components/Main.tsx","routes.ts","components/MenuBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","sampleRate","samplesize","getmonofromfile","event","a","input","target","reader","FileReader","file","files","Promise","resolve","reject","onerror","abort","DOMException","onload","ev","result","readAsArrayBuffer","arrayBuffer","audioContext","AudioContext","decodeAudioData","decoded","L","tf","getChannelData","slice","R","mono","addStrict","div","as1D","close","useStyles","makeStyles","theme","content","padding","spacing","textAlign","color","palette","text","primary","uploadbutton","marginTop","selectmodel","minWidth","circularprogress","GenreClassification","classes","React","useState","isLoaded","setLoaded","data","setData","handleClick","fileInput","document","getElementById","filename","name","arraySync","fetch","method","body","JSON","stringify","headers","Headers","Accept","rawres","json","console","log","predictions","map","v","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","maxBarThickness","Grid","container","className","item","xs","Typography","variant","Button","component","type","id","style","display","onChange","width","height","options","scales","xAxes","ticks","suggestedMin","suggestedMax","legend","maintainAspectRatio","CircularProgress","size","thickness","icon","fontSize","checkedIcon","Recomender","params","setOptions","val","open","state","setState","loading","length","setOpen","setselectsong","option","sel","selected","songs","selectedsongs","push","handleChange","value","q","trim","response","handleSelectedSong","x","recomendedSongs","this","props","Fragment","Autocomplete","disableCloseOnSelect","multiple","clearOnEscape","onOpen","onClose","getOptionLabel","getOptionSelected","renderOption","onClick","Checkbox","marginRight","checked","artist","freeSolo","disableClearable","autoSelect","renderInput","TextField","fullWidth","InputProps","endAdornment","float","List","root","song","index","ListItem","key","href","track_url","ListItemText","track_title","secondary","artist_name","Component","withStyles","background","paper","MyRoutes","exact","path","Main","CssBaseline","Container","maxWidth","fixed","children","_","routes","flexGrow","toolbarButtons","marginLeft","indicator","logo","MenuBar","setValue","icons","tabs","route","Tab","Link","to","AppBar","position","Toolbar","Avatar","alt","src","UPCLogo","Tabs","aria-label","centered","newValue","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3fb0cd42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/upc-logo.9e023929.svg\";","\r\nimport * as tf from \"@tensorflow/tfjs\"\r\n\r\nconst sampleRate = 22050;\r\nconst numSeconds = 30\r\nconst fftLength = 2048;\r\nconst hopShift = 1024;\r\nconst nmels = 128;\r\nconst samplesize = numSeconds * sampleRate;\r\nconst windowSize = fftLength;\r\n\r\nexport async function getmonofromfile(event) {\r\n\r\n    const input = event.target;\r\n    const reader = new FileReader();\r\n    const file = input.files[0] as File\r\n    const arrayBuffer = await new Promise((resolve, reject) => {\r\n        reader.onerror = () => {\r\n            reader.abort();\r\n            reject(new DOMException(\"Problem parsing input file.\"));\r\n        };\r\n\r\n        reader.onload = (ev) => resolve((ev.target as FileReader).result);;\r\n        reader.readAsArrayBuffer(file);\r\n    });\r\n\r\n    const audioContext = new AudioContext({ sampleRate });\r\n    const decoded = await audioContext.decodeAudioData(arrayBuffer as ArrayBuffer)\r\n    const L = tf.tensor1d(decoded.getChannelData(0).slice(0, samplesize))\r\n    const R = tf.tensor1d(decoded.getChannelData(1).slice(0, samplesize))\r\n    const mono = L.addStrict(R).div(2).as1D()\r\n    audioContext.close();\r\n    return mono;\r\n}\r\n\r\nexport async function getmelspectrogram(event) {\r\n\r\n    const label = \"getmelspectogram\";\r\n    const mono = await getmonofromfile(event)\r\n\r\n    const xx = padding(mono, fftLength / 2)\r\n\r\n    const S = tf.abs(tf.stft(xx, windowSize, hopShift, fftLength, tf.hannWindow)).transpose().pow(2)\r\n\r\n    const mels = mel(sampleRate, fftLength, nmels)\r\n\r\n    return tf.dot(mels, S)\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction padding(x: tf.Tensor1D, pad_width: number) {\r\n\r\n    const left = (x.slice(1, pad_width).reverse())\r\n    const right = (x.slice(x.shape[0] - pad_width - 1, pad_width).reverse())\r\n    return left.concat(x).concat(right)\r\n\r\n}\r\n\r\n\r\nfunction mel(sr: number, n_fft: number, n_mels: number) {\r\n    const fmax = sr / 2;\r\n    const fmin = 0.0;\r\n    let weights = tf.zeros([n_mels, n_fft / 2 + 1], \"float32\")\r\n    let weightsarr = tf.zeros([n_mels, n_fft / 2 + 1], \"float32\").arraySync()\r\n    const fftfreqs = tf.linspace(0, sr / 2, 1 + n_fft / 2)\r\n    const mel_f = mel_frequencies(n_mels + 2, fmin, fmax)\r\n    const fdiff = mel_f.slice(1).sub(mel_f.slice(0, mel_f.size - 1))\r\n    const ramps = tf.tensor(subtractwithBroadcasting(mel_f.arraySync(), fftfreqs.dataSync()))\r\n    for (let i = 0; i < n_mels; i++) {\r\n        const lower = tf.tensor(ramps.mul(-1).arraySync()[i]).div(fdiff.arraySync()[i])\r\n        const upper = tf.tensor(ramps.arraySync()[i + 2]).div(fdiff.arraySync()[i + 1])\r\n\r\n        weightsarr[i] = tf.maximum(0, tf.minimum(lower, upper)).arraySync()\r\n        weights = tf.tensor(weightsarr)\r\n        const diff = mel_f.slice(2, n_mels).sub(mel_f.slice(0, n_mels))\r\n        let enorm = tf.tensor([2.0]).tile([n_mels]).div(diff);\r\n        const temp = enorm.tile([1 + n_fft / 2]).reshape([n_mels, 1 + n_fft / 2])\r\n        weights = weights.mul(temp);\r\n    }\r\n\r\n\r\n    return weights;\r\n}\r\n\r\n\r\n\r\nfunction mel_frequencies(n_mels: number, fmin: number, fmax: number) {\r\n\r\n    const min_mel = 0\r\n    const max_mel = hz_to_mel(fmax)\r\n\r\n    const mels = tf.linspace(min_mel, max_mel, n_mels)\r\n\r\n\r\n    return mel_to_hz(mels)\r\n\r\n}\r\n\r\nfunction hz_to_mel(frequencies: number) {\r\n    const f_min = 0.0\r\n    const f_sp = 200.0 / 3\r\n    let mels = (frequencies - f_min) / f_sp\r\n    const min_log_hz = 1000.0\r\n    const min_log_mel = (min_log_hz - f_min) / f_sp\r\n    const logstep = Math.log(6.4) / 27.0\r\n    mels = min_log_mel + Math.log(frequencies / min_log_hz) / logstep\r\n\r\n    return mels\r\n}\r\nfunction mel_to_hz(mels: tf.Tensor) {\r\n\r\n    const f_min = tf.tensor(0.0)\r\n    const f_sp = tf.tensor(200.0 / 3)\r\n    const min_log_hz = tf.tensor(1000.0)\r\n    const min_log_mel = min_log_hz.sub(f_min).div(f_sp)\r\n    const logstep = tf.tensor(Math.log(6.4) / 27.0)\r\n\r\n    const freqs = f_min.add(f_sp).mul(mels)\r\n\r\n    const cond = mels.less(min_log_mel); // True,false\r\n\r\n\r\n    return freqs.where(cond, min_log_hz.mul(tf.exp(logstep.mul(mels.sub(min_log_mel)))));\r\n\r\n\r\n}\r\n\r\n\r\nfunction subtractwithBroadcasting(arr1, arr2) {\r\n    let result = new Array(arr1.length).fill(new Array(arr2.length).fill(0))\r\n    result = arr1.map(val1 => arr2.map((val2) => val1 - val2))\r\n    return result\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  makeStyles,\r\n  FormControl,\r\n  InputLabel,\r\n  Input,\r\n  FormHelperText,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  IconButton\r\n} from \"@material-ui/core\";\r\nimport { HorizontalBar } from \"react-chartjs-2\";\r\n\r\nimport CloudUploadOutlinedIcon from \"@material-ui/icons/CloudUploadOutlined\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { getmonofromfile } from \"../utils/spectralanalysis\";\r\nconst useStyles = makeStyles(theme => ({\r\n  content: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.primary\r\n  },\r\n  uploadbutton: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  selectmodel: {\r\n    minWidth: \"10em\"\r\n  },\r\n  circularprogress: {\r\n    color: \"#428EC6\",\r\n    marginTop: theme.spacing(12)\r\n  }\r\n}));\r\n\r\nexport default function GenreClassification() {\r\n  const classes = useStyles();\r\n \r\n  const [modelSelected, setModel] = React.useState(\"\");\r\n  const [isLoaded, setLoaded] = React.useState(false);\r\n\r\n  const [data, setData] = React.useState();\r\n\r\n  const options = {\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          ticks: {\r\n            suggestedMin: 0,\r\n            suggestedMax: 100\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    legend: false,\r\n    maintainAspectRatio: true\r\n  };\r\n  \r\n  const handleClick = async function(event:any) {\r\n    setLoaded(false);\r\n    const fileInput = document.getElementById(\"upload\") as any;\r\n    const filename = fileInput.files[0].name;\r\n    const mono = (await getmonofromfile(event)).arraySync();\r\n    const rawres= await fetch(\"/getgenre\",{\r\n      \r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        mono\r\n      }),\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      })\r\n    })\r\n    const json = await rawres.json();\r\n    console.log(json);\r\n    \r\n    const predictions = json.predictions.map(v => v*100)\r\n    console.log(json.predictions);\r\n    console.log(predictions);\r\n    \r\n\r\n    setData(\r\n      {\r\n        labels: ['blues', 'classical', 'country', 'disco', 'hiphop', 'jazz', 'metal', 'pop', 'reggae','rock'],\r\n        datasets: [\r\n          {\r\n            label: filename,\r\n            backgroundColor: \"#ff6c850f\",\r\n            borderColor: \"#ff6c85ff\",\r\n            borderWidth: 1,\r\n            hoverBackgroundColor: \"#ff6c852f\",\r\n            hoverBorderColor: \"#ff6c85ff\",\r\n            data: predictions,\r\n            maxBarThickness: 40\r\n          }\r\n        ]\r\n      }\r\n    );\r\n    setLoaded(true);\r\n  };\r\n  const handleChange = function(event) {\r\n    setModel(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Grid container className={classes.content}>\r\n      <Grid item xs={12}>\r\n        <Typography variant=\"h4\">Genre Classification</Typography>\r\n      </Grid>\r\n\r\n      \r\n      <Grid item xs={12}>\r\n        <Button\r\n          variant=\"contained\"\r\n          component=\"label\"\r\n          className={classes.uploadbutton}\r\n        >\r\n          Upload Song\r\n          <CloudUploadOutlinedIcon />\r\n          <input\r\n            type=\"file\"\r\n            id=\"upload\"\r\n            style={{ display: \"none\" }}\r\n            onChange={handleClick}\r\n          />\r\n        </Button>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        {isLoaded ? (\r\n          <HorizontalBar\r\n            data={data}\r\n            width={100}\r\n            height={40}\r\n            options={options}\r\n          />\r\n        ) : (\r\n          <CircularProgress\r\n            className={classes.circularprogress}\r\n            size={150}\r\n            thickness={3}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {\r\n  CircularProgress,\r\n  Button,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  makeStyles,\r\n  withStyles\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop:\"1rem\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n});\r\n\r\nclass Recomender extends Component<any, any> {\r\n  /**\r\n   *\r\n   */\r\n\r\n  constructor(params) {\r\n    super(params);\r\n    this.state = {\r\n      selectedsongs: [],\r\n      open: false,\r\n      options: [],\r\n      loading: true,\r\n      recomendedSongs: []\r\n    } as any;\r\n  }\r\n  setOptions = val => {\r\n    const open = this.state.open;\r\n    this.setState({ options: val.slice(), loading: open && val.length === 0 });\r\n  };\r\n  setOpen = val => {\r\n    this.setState({ open: val });\r\n  };\r\n\r\n  setselectsong = (option, sel) => {\r\n    if (!sel.selected) {\r\n      const songs = this.state.selectedsongs.slice();\r\n      songs.push(option);\r\n      this.setState({ selectedsongs: [...songs] });\r\n    }\r\n  };\r\n\r\n  handleChange = async ev => {\r\n    this.setOpen(false);\r\n    console.log(ev.target.value);\r\n    const q = ev.target.value as string;\r\n    if (q == null || q.trim() == \"\") {\r\n      this.setOptions([]);\r\n    }\r\n\r\n    const response = await fetch(\"/searchsongs?q=\" + q, {\r\n      \r\n      method: \"GET\"\r\n    });\r\n\r\n    const songs = await response.json();\r\n    console.log(songs);\r\n    this.setOptions(songs);\r\n    this.setOpen(true);\r\n  };\r\n  handleSelectedSong = option => {\r\n    console.log(option.target.value);\r\n    \r\n  };\r\n\r\n  handleClick = async ev => {\r\n    const response = await fetch(\"/getRecommendations\", {\r\n      \r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        selectedsongs: this.state.selectedsongs.map(x => x)\r\n      }),\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      })\r\n    });\r\n    const songs = await response.json();\r\n    console.log(songs);\r\n\r\n    this.setState({\r\n      recomendedSongs: songs.slice()\r\n    });\r\n  };\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Autocomplete\r\n          disableCloseOnSelect\r\n          multiple\r\n          id=\"song-selector\"\r\n          style={{ marginTop: \"2rem\" }}\r\n          open={this.state.open}\r\n          clearOnEscape\r\n          onOpen={() => {\r\n            this.setOpen(true);\r\n          }}\r\n          onClose={() => {\r\n            this.setOpen(false);\r\n          }}\r\n          getOptionLabel={option => option.name}\r\n          onChange={this.handleSelectedSong}\r\n          getOptionSelected={(option, value) => option.id === value.id}\r\n          renderOption={(option, sel) => (\r\n            <span\r\n              onClick={ev => this.setselectsong(option, sel)}\r\n              style={{ width: \"100%\" }}\r\n            >\r\n              <Checkbox\r\n                icon={icon}\r\n                checkedIcon={checkedIcon}\r\n                style={{ marginRight: 8 }}\r\n                checked={sel.selected}\r\n              />\r\n              {option.name + \" by \" + option.artist}\r\n            </span>\r\n          )}\r\n          options={this.state.options}\r\n          loading={this.state.loading}\r\n          freeSolo\r\n          disableClearable\r\n          autoSelect={true}\r\n          renderInput={params => (\r\n            <React.Fragment>\r\n              <TextField\r\n                {...params}\r\n                onChange={this.handleChange}\r\n                label=\"Select Track\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  ...params.InputProps,\r\n                  endAdornment: (\r\n                    <React.Fragment>\r\n                      {this.state.loading ? (\r\n                        <CircularProgress color=\"inherit\" size={20} />\r\n                      ) : null}\r\n                      {params.InputProps.endAdornment}\r\n                    </React.Fragment>\r\n                  )\r\n                }}\r\n              />\r\n            </React.Fragment>\r\n          )}\r\n        />\r\n\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          onClick={this.handleClick}\r\n          style={{\r\n            marginTop: \"-3.5em\",\r\n            marginRight: \"-9em\",\r\n            float: \"right\"\r\n          }}\r\n        >\r\n          Recommend\r\n        </Button>\r\n        { (\r\n          <List component=\"nav\" className={classes.root}>\r\n            {this.state.recomendedSongs.map((song,index) => (\r\n            <ListItem key={index}>\r\n              <a target=\"_blank\" href={song.track_url}>\r\n              <ListItemText\r\n                primary={song.track_title}\r\n                secondary={song.artist_name}\r\n              />\r\n              </a>\r\n            </ListItem>\r\n            )) }\r\n          </List>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default  withStyles(styles)(Recomender)","import React from \"react\"\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport { routes } from \"../routes\";\r\nimport GenreClassification from \"./GenreClassification\";\r\nimport Recomender from \"./Recomend\";\r\n\r\n\r\nconst MyRoutes = (props) => {\r\n    console.log(props);\r\n    \r\n   return (\r\n        <React.Fragment>\r\n            <Switch>\r\n                <Route key = {0}  exact   path= \"/\"  component = {GenreClassification} />             \r\n                <Route key = {1}  exact  path =  \"/recomendsong\" component = {Recomender} />             \r\n            </Switch>\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\n\r\nexport default MyRoutes\r\n","import { Component } from \"react\";\r\nimport { withStyles, Container, CssBaseline } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nconst styles: any = (_) => ({});\r\nclass Main extends Component<any> {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <CssBaseline />\r\n        <Container maxWidth=\"md\" fixed>\r\n          <main>{this.props.children}</main>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Main);\r\n","import GenreClassification from \"./components/GenreClassification\";\r\nimport Recomender from \"./components/Recomend\";\r\n\r\n\r\n\r\n\r\nexport const routes = [\r\n     \r\n     {label :\"Genre Classification\", path: \"/\", component: GenreClassification },\r\n    { label :\"Song Recommender\",path: \"/recomendsong\", component: Recomender }\r\n    \r\n   \r\n]\r\n\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport AlbumIcon from \"@material-ui/icons/Album\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { routes } from \"../routes\";\r\nimport {\r\n  Toolbar,\r\n  Button,\r\n  Typography,\r\n  IconButton,\r\n  Avatar\r\n} from \"@material-ui/core\";\r\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport UPCLogo from \"../images/upc-logo.svg\";\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  toolbarButtons: {\r\n    marginLeft: \"auto\"\r\n  },\r\n  indicator: {\r\n    backgroundColor: \"#428EC6\"\r\n  },\r\n  logo:{\r\n    width: 50,\r\n    height: 50,\r\n  }\r\n}));\r\n\r\nexport default function MenuBar() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n    console.log(newValue);\r\n  };\r\n  const icons = [<AlbumIcon />, <LibraryMusicIcon />];\r\n  const tabs = routes.map((route, index) => (\r\n    <Tab\r\n      icon={icons[index]}\r\n      label={route.label}\r\n      component={Link}\r\n      value={index}\r\n      key={index}\r\n      to={route.path}\r\n    />\r\n  ));\r\n  console.log(tabs);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.indicator}>\r\n        <Toolbar>\r\n          <Avatar className={classes.logo} alt=\"UPCLogo\" src={UPCLogo} />\r\n       \r\n        </Toolbar>\r\n      </AppBar>\r\n      <Tabs\r\n        value={value}\r\n        aria-label=\"simple tabs example\"\r\n        centered\r\n        onChange={handleChange}\r\n      >\r\n        {tabs}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\nimport MyRoutes from \"./components/MyRoutes\";\nimport Main from \"./components/Main\";\nimport MenuBar from \"./components/MenuBar\";\n\nconst App: React.FC = () => {\n  return (\n    <Fragment>\n      <MenuBar />\n      <Main>\n        <MyRoutes />\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}